#
# ngIRCd -- The Next Generation IRC Daemon
# Copyright (c)2001,2002 by Alexander Barton (alex@barton.de)
#
# Dieses Programm ist freie Software. Sie koennen es unter den Bedingungen
# der GNU General Public License (GPL), wie von der Free Software Foundation
# herausgegeben, weitergeben und/oder modifizieren, entweder unter Version 2
# der Lizenz oder (wenn Sie es wuenschen) jeder spaeteren Version.
# Naehere Informationen entnehmen Sie bitter der Datei COPYING. Eine Liste
# der an ngIRCd beteiligten Autoren finden Sie in der Datei AUTHORS.
#
# $Id: configure.in,v 1.58.2.10 2002/11/24 15:33:26 alex Exp $
#

# -- Initialisierung --

AC_INIT
AC_PREREQ(2.50)
AC_CANONICAL_TARGET
AC_CONFIG_SRCDIR(src/config.h.in)
AM_INIT_AUTOMAKE(ngircd,0.5.4)
AM_CONFIG_HEADER(src/config.h)

# -- Templates fuer config.h --

AH_TEMPLATE([DEBUG], [Define if debug-mode should be enabled])
AH_TEMPLATE([HAVE_socklen_t], [Define if socklen_t exists])
AH_TEMPLATE([SNIFFER], [Define if IRC sniffer should be enabled])
AH_TEMPLATE([STRICT_RFC], [Define if ngIRCd should behave strict RFC compliant])
AH_TEMPLATE([USE_SYSLOG], [Define if syslog should be used for logging])
AH_TEMPLATE([IRCPLUS], [Define if IRC+ protocol should be used])

AH_TEMPLATE([TARGET_OS], [Target operating system name])
AH_TEMPLATE([TARGET_VENDOR], [Target system vendor])
AH_TEMPLATE([TARGET_CPU], [Target CPU name])

# -- C Compiler --

AC_PROG_CC

# -- Hilfsprogramme --

AC_PROG_AWK
AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_MAKE_SET
AC_PROG_RANLIB

# -- Compiler Features --

AC_LANG_C

AM_C_PROTOTYPES
AC_C_CONST

# -- Header --

AC_HEADER_STDC

AC_HEADER_TIME

AC_HEADER_SYS_WAIT

AC_CHECK_HEADERS([ \
	ctype.h errno.h fcntl.h netdb.h netinet/in.h stdlib.h string.h \
	strings.h sys/socket.h sys/time.h unistd.h \
	],,AC_MSG_ERROR([required C header missing!]))

AC_CHECK_HEADERS(arpa/inet.h malloc.h stdint.h sys/select.h varargs.h)

# -- Datentypen --

AC_MSG_CHECKING(whether socklen_t exists)
AC_TRY_COMPILE([
	#include <sys/socket.h>
	#include <sys/types.h>
	],[
	socklen_t a, b;
	a = 2; b = 4; a += b;
	],[
	AC_DEFINE(HAVE_socklen_t) AC_MSG_RESULT(yes)
	],[
	AC_MSG_RESULT(no)
])

AC_TYPE_SIGNAL

AC_TYPE_SIZE_T

# -- Libraries --

AC_CHECK_LIB(UTIL,memmove)
AC_CHECK_LIB(socket,bind)
AC_CHECK_LIB(nsl,gethostent)

# -- Funktionen --

AC_FUNC_MALLOC

AC_FUNC_FORK

AC_FUNC_STRFTIME

AC_CHECK_FUNCS([ \
	bind gethostbyaddr gethostbyname gethostname inet_ntoa memmove \
	memset select setsockopt socket strcasecmp strchr strerror \
	strstr waitpid \
	],,AC_MSG_ERROR([required function missing!]))

AC_CHECK_FUNCS(inet_aton sigaction snprintf vsnprintf)

# -- Konfigurationsoptionen --

x_syslog_on=no
AC_ARG_ENABLE(syslog,
	[  --disable-syslog        disable syslog (autodetected by default)],
	[	if test "$enableval" = "yes"; then
			AC_CHECK_HEADER(syslog.h, x_syslog_on=yes,
				AC_MSG_ERROR([Can't enable syslog: syslog.h not found!])
			)
		fi
	],
	[	AC_CHECK_HEADER(syslog.h, x_syslog_on=yes) ]
)
if test "$x_syslog_on" = "yes"; then
	AC_DEFINE(USE_SYSLOG, 1)
	AC_CHECK_LIB(be,syslog)
fi

x_ircplus_on=yes
AC_ARG_ENABLE(ircplus,
	[  --disable-ircplus       disable IRC+ protocol],
	if test "$enableval" = "no"; then x_ircplus_on=no; fi
)
if test "$x_ircplus_on" = "yes"; then
	AC_DEFINE(IRCPLUS, 1)
fi

AC_ARG_ENABLE(sniffer,
	[  --enable-sniffer        enable IRC traffic sniffer (enables debug mode)],
	if test "$enableval" = "yes"; then
		AC_DEFINE(SNIFFER, 1)
		x_sniffer_on=yes; x_debug_on=yes
	fi
)

AC_ARG_ENABLE(debug,
	[  --enable-debug          show additional debug output],
	if test "$enableval" = "yes"; then x_debug_on=yes; fi
)
if test "$x_debug_on" = "yes"; then
	AC_DEFINE(DEBUG, 1)
fi

AC_ARG_ENABLE(strict-rfc,
	[  --enable-strict-rfc     strict RFC conformance -- may break clients!],
	if test "$enableval" = "yes"; then
		AC_DEFINE(STRICT_RFC, 1)
		x_strict_rfc_on=yes
	fi
)


# -- Definitionen --

AC_DEFINE_UNQUOTED(TARGET_CPU, "$target_cpu" )
AC_DEFINE_UNQUOTED(TARGET_VENDOR, "$target_vendor" )
AC_DEFINE_UNQUOTED(TARGET_OS, "$target_os" )

if test `uname` = "A/UX"; then
	# unter A/UX sollte _POSIX_SOURCE definiert sein.
	AC_MSG_RESULT([detected A/UX, defining _POSIX_SOURCE])
	CFLAGS="$CFLAGS -D_POSIX_SOURCE"
fi

# -- Variablen --

if test "$GCC" = "yes"; then
	CFLAGS="-Wall $CFLAGS"
fi

CFLAGS="$CFLAGS -DSYSCONFDIR='\"\$(sysconfdir)\"'"

# -- Ausgabe der Dateien --

AC_OUTPUT([ \
	Makefile \
	doc/Makefile \
	doc/en/Makefile \
	MacOSX/Makefile \
	MacOSX/ngircd.pbproj/Makefile \
	src/Makefile \
	src/portab/Makefile \
	src/ngircd/Makefile \
	src/testsuite/Makefile \
	man/Makefile \
	contrib/Makefile \
])

# -- Ergebnis --

echo

# Someone please show me a better way :)  [borrowed by OpenSSH]
B=`eval echo ${bindir}` ; B=`eval echo ${B}`
S=`eval echo ${sbindir}` ; S=`eval echo ${S}`
C=`eval echo ${sysconfdir}` ; C=`eval echo ${C}`
M=`eval echo ${mandir}` ; M=`eval echo ${M}`

echo "                host: ${host}"
echo "            compiler: ${CC}"
echo "      compiler flags: ${CFLAGS}"
echo "  preprocessor flags: ${CPPFLAGS}"
echo "        linker flags: ${LDFLAGS}"
echo "           libraries: ${LIBS}"
echo

echo "     'ngircd' binary: $S"
echo "  configuration file: $C"
echo "        manual pages: $M"
echo

echo $ECHO_N "      active options: $ECHO_C"
test "$x_syslog_on" = "yes"	&& echo $ECHO_N "Syslog $ECHO_C"
test "$x_debug_on" = "yes"	&& echo $ECHO_N "Debug $ECHO_C"
test "$x_sniffer_on" = "yes"	&& echo $ECHO_N "Sniffer $ECHO_C"
test "$x_strict_rfc_on" = "yes"	&& echo $ECHO_N "Strict-RFC $ECHO_C"
test "$x_ircplus_on" = "yes"	&& echo $ECHO_N "IRC+ $ECHO_C"
echo; echo

# -eof-
